From bfdb4d5ba5efeb9b03b7fff96dbb643dcbf01535 Mon Sep 17 00:00:00 2001
From: Flavien BRIDAULT-LOUCHEZ <fbridault-louchez@IRCW087.(none)>
Date: Fri, 3 Oct 2014 12:19:52 +0200
Subject: [PATCH] Optimized vtkUpload3D in specific cases.

---
 Rendering/OpenGL/vtkPixelBufferObject.cxx | 78 +++++++++++++++++++++----------
 1 file changed, 54 insertions(+), 24 deletions(-)

diff --git a/Rendering/OpenGL/vtkPixelBufferObject.cxx b/Rendering/OpenGL/vtkPixelBufferObject.cxx
index 8026455..57edeb8 100644
--- a/Rendering/OpenGL/vtkPixelBufferObject.cxx
+++ b/Rendering/OpenGL/vtkPixelBufferObject.cxx
@@ -316,46 +316,76 @@ public:
 
       int numComp;
       int *permutation=0;
+
+      // If no component reordering is necessary, we can make some optimization
       if(components==0)
         {
-        numComp=numComponents;
-        permutation=new int[numComponents];
-        int i=0;
-        while(i<numComp)
+
+        // Shortest path, everything is contiguous in memory
+        // (tested with a 1980x1080x1, 4 bytes per component, RGBA image: 80% faster in release, 97% faster in debug)
+        if(continuousIncrements[0] == 0 && continuousIncrements[1] == 0 && continuousIncrements[2] == 0)
           {
-          permutation[i]=i;
-          ++i;
+
+          memcpy(fIoMem, inData, numComponents * dims[0] * dims[1] * dims[2]);
+          }
+        else
+          {
+
+          // This is not contiguous in memory but we can skip the reordering
+          // (tested with a 1980x1080x1, 4 bytes per component, image: 0% faster in release but 65% faster in debug)
+          vtkIdType tupleSize =
+            static_cast<vtkIdType>(numComponents + continuousIncrements[0]);
+          for (unsigned int zz=0; zz < dims[2]; zz++)
+            {
+            for (unsigned int yy = 0; yy < dims[1]; yy++)
+              {
+              for (unsigned int xx=0; xx < dims[0]; xx++)
+                {
+                memcpy(fIoMem, inData, tupleSize);
+
+                fIoMem += tupleSize;
+                inData += tupleSize+continuousIncrements[0];
+                }
+              // Reached end of row, go to start of next row.
+              inData += continuousIncrements[1] * tupleSize;
+              }
+            // Reached end of 2D plane.
+            inData += continuousIncrements[2] * tupleSize;
+            }
           }
+
         }
       else
         {
+        // Generic path
         numComp=components;
         permutation=componentList;
-        }
 
-      vtkIdType tupleSize =
-        static_cast<vtkIdType>(numComponents + continuousIncrements[0]);
-      for (unsigned int zz=0; zz < dims[2]; zz++)
-        {
-        for (unsigned int yy = 0; yy < dims[1]; yy++)
+        vtkIdType tupleSize =
+          static_cast<vtkIdType>(numComponents + continuousIncrements[0]);
+        for (unsigned int zz=0; zz < dims[2]; zz++)
           {
-          for (unsigned int xx=0; xx < dims[0]; xx++)
+          for (unsigned int yy = 0; yy < dims[1]; yy++)
             {
-            for (int compNo=0; compNo < numComp; compNo++)
+            for (unsigned int xx=0; xx < dims[0]; xx++)
               {
-              *fIoMem = inData[permutation[compNo]];
-//              cout<<"upload[zz="<<zz<<"][yy="<<yy<<"][xx="<<xx<<"][compNo="<<
-//              compNo<<"] from inData to pbo="<<(double)(*fIoMem)<<endl;
-
-              fIoMem++;
+              for (int compNo=0; compNo < numComp; compNo++)
+                {
+                *fIoMem = inData[permutation[compNo]];
+  //              cout<<"upload[zz="<<zz<<"][yy="<<yy<<"][xx="<<xx<<"][compNo="<<
+  //              compNo<<"] from inData to pbo="<<(double)(*fIoMem)<<endl;
+
+                fIoMem++;
+                }
+              inData += tupleSize+continuousIncrements[0];
               }
-            inData += tupleSize+continuousIncrements[0];
+            // Reached end of row, go to start of next row.
+            inData += continuousIncrements[1] * tupleSize;
             }
-          // Reached end of row, go to start of next row.
-          inData += continuousIncrements[1] * tupleSize;
+          // Reached end of 2D plane.
+          inData += continuousIncrements[2] * tupleSize;
           }
-        // Reached end of 2D plane.
-        inData += continuousIncrements[2] * tupleSize;
+
         }
 
       if(components==0)
-- 
1.9.1

